#+Title: capio

#+Author: Salvador Fandi√±o
#+Email: sfandino@yahoo.com

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: :nil
#+OPTIONS: ^:{}

#+REVEAL_THEME: black
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

#+REVEAL_EXTRA_CSS: ./extra.css

* Ara√±ando mi propio picaz√≥n...

** ~tea4cups~

   Backend para CUPS que permite ejecutar acciones (scripts) sobre los
   trabajos de impresi√≥n.

   Nosotros (en el curro) lo utilizamos para redirigir trabajos de
   impresi√≥n de Linux a Windows.

   Bien como prueba de concepto, pero queremos reemplazarlo por un
   programa m√°s simple y que se ajuste mejor a nuestras necesidades.

   ¬°Es s√≥lo cuesti√≥n de ver que hace ~tea4cups~ y componer un programa
   con las partes que nos interesan!

** ¬øComo funciona CUPS?

   CUPS esta perfectamente documentado:

   https://www.cups.org/documentation.html

   https://www.cups.org/doc/api-cups.html

** ¬øComo funciona ~tea4cups~?

   ~tea4cups~ es un script de Python

   #+ATTR_REVEAL: :frag appear
   ¬°Todo el mundo sabe que es muy f√°cil entender los programas escritos en Python!

   #+ATTR_REVEAL: :frag appear
   http://svn.pykota.com/tea4cups/trunk/tea4cups

** üí°

   #+ATTR_REVEAL: :frag appear
   ¬øPara que vamos a estudiar el c√≥digo de un programa cuando podemos
   hacer ingenier√≠a inversa?

** Necesito...

   #+ATTR_REVEAL: :frag appear
   ...un programa que me permita ver el di√°logo entre ~CUPS~ y ~tea4cups~.

   #+ATTR_REVEAL: :frag appear
   ...algo similar a ~Wireshark~ pero que funcione con sockets, pipes, ficheros, etc.

** üîç

   #+ATTR_REVEAL: :frag appear
   - ~strace~:
     - Monitor de procesos de proposito general, flexible y maduro.
     - No presenta flujos de I/O m√°s que de manera muy rudimentaria.
     - Basado en [[http://man7.org/linux/man-pages/man2/ptrace.2.html][ptrace(2)]].

   #+ATTR_REVEAL: :frag appear
   - ~SysDig~, ~LTTng~, ~DTrace~, etc.
     - Frameworks que permiten introducir sondas en el kernel.
     - Algunos tienen su propio lenguaje de programaci√≥n.
     - Complejos y dificiles de usar.

** ‚òπ

** ~ptrace(2)~

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC
DESCRIPTION
       The  ptrace()  system  call provides a means by which one
       process (the "tracer") may observe and control the execution
       of another process (the "tracee"), and examine and change
       the tracee's memory and registers.  It is primarily used to
       implement breakpoint debugging and system call tracing.
#+END_SRC

#+ATTR_REVEAL: :frag appear
¬°Siempre he querido hacer algo con ~ptrace~!

** ‚ò∫

* ~capio~

  ~capio~ es un programa de monitorizaci√≥n de procesos.

  Similar a ~strace~, pero haciendo foco en la entrada/salida.

  Solo para Linux.

  Solo para x86_64 (por ahora).

* Como se usa

** Pasando el comando a ejecutar

#+BEGIN_SRC shell
capio echo hello
#+END_SRC

#+BEGIN_SRC wide-output
# open(filename:"/etc/ld.so.cache", flags:O_RDONLY|O_CLOEXEC|524288, mode:0001) = 4; path:"/etc/ld.so.cache"
# mmap(fd:4) = 140434569814016
# close(fd:4) = 0
# open(filename:"/lib/x86_64-linux-gnu/libc.so.6", flags:O_RDONLY|O_CLOEXEC|524288, mode:03773457052320550) = 4; path:"/lib/x86_64-linux-gnu/libc-2.24.so"
# read(fd:4) = 832
< 7f 45 4c 46 02 01 01 03 00 00 00 00 00 00 00 00 03 00 3e 00 01 00 00 00 10 05 02 00 00 00 00 00 < .ELF..............>.............
< 40 00 00 00 00 00 00 00 b0 42 1c 00 00 00 00 00 00 00 00 00 40 00 38 00 0a 00 40 00 49 00 48 00 < @........B..........@.8...@.I.H.
< 06 00 00 00 05 00 00 00 40 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 < ........@.......@.......@.......
< 30 02 00 00 00 00 00 00 30 02 00 00 00 00 00 00 08 00 00 00 00 00 00 00 03 00 00 00 04 00 00 00 < 0.......0.......................
< c0 43 19 00 00 00 00 00 c0 43 19 00 00 00 00 00 c0 43 19 00 00 00 00 00 1c 00 00 00 00 00 00 00 < .C.......C.......C..............
...
#+END_SRC

** Pasando el pid

#+BEGIN_SRC shell
capio -p `pidof firefox`
#+END_SRC

** Selectores

#+BEGIN_SRC shell
 capio -f -n "/*/ssh" -N "socket:*" -l0 -l1 scp localhost:/etc/host.conf /tmp
#+END_SRC

#+BEGIN_SRC wide-output
# 31566 dup(fd:0) = 5
# 31566 dup(fd:1) = 6
# 31566 read(fd:5) = 1
< 00 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ < .
# 31566 write(fd:6) = 19
> 43 30 36 34 34 20 39 32 20 68 6f 73 74 2e 63 6f 6e 66 0a __ __ __ __ __ __ __ __ __ __ __ __ __ > C0644 92 host.conf.
# 31566 read(fd:5) = 1
< 00 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ < .
host.conf                                                                                             0%    0     0.0KB/s   --:-- ETA# 31566 write(fd:6) = 93
> 23 20 54 68 65 20 22 6f 72 64 65 72 22 20 6c 69 6e 65 20 69 73 20 6f 6e 6c 79 20 75 73 65 64 20 > # The "order" line is only used 
> 62 79 20 6f 6c 64 20 76 65 72 73 69 6f 6e 73 20 6f 66 20 74 68 65 20 43 20 6c 69 62 72 61 72 79 > by old versions of the C library
> 2e 0a 6f 72 64 65 72 20 68 6f 73 74 73 2c 62 69 6e 64 0a 6d 75 6c 74 69 20 6f 6e 0a 00 __ __ __ > ..order hosts,bind.multi on..
host.conf                                                                                           100%   92   216.9KB/s   00:00    
# 31566 read(fd:5) = 1
< 00 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ < .
# 31566 close(fd:6) = 0
# 31566 close(fd:5) = 0
#+END_SRC

** Formatos de salida

#+BEGIN_SRC shell
$ capio -mn -q -f -n "/*/ssh" -N "socket:*" -l0 -l1 scp localhost:/etc/host.conf /tmp
#+END_SRC

#+BEGIN_SRC output
< "\0"
> "C0644 92 host.conf\n"
< "\0"
> "# The "order" line is only used by old versions of the C library.\n"
> "order hosts,bind\n"
> "multi on\n"
> "\0"
< "\0"
#+END_SRC

** Redirigir la salida de forma independiente

#+BEGIN_SRC shell
capio -O -o /tmp/output -p `pidof apache`
#+END_SRC

* ¬øQue tiene esto que ver con Perl?

* Perl embebido

** One-liners

#+BEGIN_SRC shell
capio -q -e 'say if /cookie/i' -p `pidof firefox`
#+END_SRC

** Scripts

#+BEGIN_SRC shell
capio -M ./script.pl -p `pidof firefox`
#+END_SRC

#+BEGIN_SRC perl
use strict;
use warnings;
use 5.024;

sub _ {
    say if /cookie/i;
}
#+END_SRC

** Variables

   ...globales y faciles de usar en one-liners:

   - ~$_~: Los datos en la operaci√≥n de I/O.

   - ~$LEN~: La longitud de los datos.

   - ~$PID~: El identificador del proceso.

   - ~$OP~: El c√≥digo de la operaci√≥n (syscall).

   - ~$FD~: El descriptor de fichero (un n√∫mero).

   - ~$DIR~, ~$R~, ~$W~: Lectura o escritura.

   - ~$FN~: El path del fichero.

   - ~$EXE~: El path del ejecutable.

   - ~$RC~: El resultado de la operaci√≥n.

   - ~OUT~: El fichero al que ha de enviarse la salida.

** Ejemplo

   [[https://github.com/salva/capio/blob/master/examples/ipp.pl][ipp.pl]]

* El lado oscuro...

** Lenguaje

   #+ATTR_REVEAL: :frag appear, fade-out
   I ‚ù§ Rust

   #+ATTR_REVEAL: :frag appear, fade-out
   I ‚ù§ C

   #+ATTR_REVEAL: :frag appear
   I..., I..., I... C++

** La metodolog√≠a

   #+ATTR_REVEAL
   I ‚ù§ Caos

** Perl embebido

   [[https://github.com/salva/capio/blob/master/perl.h][perl.h]]


* ¬øPreguntas?

* Gracias

